//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/_Project/Content/Actors/Player/Player Actions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Wokarol.SpaceScrapper.Input
{
    public partial class @PlayerInputActions : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @PlayerInputActions()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""Player Actions"",
    ""maps"": [
        {
            ""name"": ""Flying"",
            ""id"": ""3451e535-c176-45ae-81ce-54bfb7ea6b49"",
            ""actions"": [
                {
                    ""name"": ""Aim (Pointer)"",
                    ""type"": ""Value"",
                    ""id"": ""8d43ed78-a7d0-46b1-b58d-29ee80dcdf0d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""7b3d296b-7be6-4220-9f97-23275c69b4d9"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Grab"",
                    ""type"": ""Button"",
                    ""id"": ""ef33a675-cbe3-4fbf-a729-0ffc4b5ee397"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=2)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""da5b8c7b-37de-4e5f-9ebc-a04dfe19d559"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=2)"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""412e33ca-2864-44b7-841f-0ff05a4ee94e"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Aim (Pointer)"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""fedbe7fb-9a1c-4ff4-9d5c-73b06aeebc44"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""77cebdcf-11a2-4a19-bf7d-61a1e6e5eda2"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""ea743dd6-ffc8-4699-8c83-f5aea4b8069d"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""bfc437d6-37c6-48ba-a6e2-34fce2941f6e"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""496f766d-10b1-451d-9d51-07731c1ef717"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""162c512b-9d87-4de8-a5db-b270b4492a1d"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Grab"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""703e76b8-6672-467d-b058-ae33eac50284"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard and Mouse"",
            ""bindingGroup"": ""Keyboard and Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
            // Flying
            m_Flying = asset.FindActionMap("Flying", throwIfNotFound: true);
            m_Flying_AimPointer = m_Flying.FindAction("Aim (Pointer)", throwIfNotFound: true);
            m_Flying_Move = m_Flying.FindAction("Move", throwIfNotFound: true);
            m_Flying_Grab = m_Flying.FindAction("Grab", throwIfNotFound: true);
            m_Flying_Shoot = m_Flying.FindAction("Shoot", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Flying
        private readonly InputActionMap m_Flying;
        private IFlyingActions m_FlyingActionsCallbackInterface;
        private readonly InputAction m_Flying_AimPointer;
        private readonly InputAction m_Flying_Move;
        private readonly InputAction m_Flying_Grab;
        private readonly InputAction m_Flying_Shoot;
        public struct FlyingActions
        {
            private @PlayerInputActions m_Wrapper;
            public FlyingActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @AimPointer => m_Wrapper.m_Flying_AimPointer;
            public InputAction @Move => m_Wrapper.m_Flying_Move;
            public InputAction @Grab => m_Wrapper.m_Flying_Grab;
            public InputAction @Shoot => m_Wrapper.m_Flying_Shoot;
            public InputActionMap Get() { return m_Wrapper.m_Flying; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(FlyingActions set) { return set.Get(); }
            public void SetCallbacks(IFlyingActions instance)
            {
                if (m_Wrapper.m_FlyingActionsCallbackInterface != null)
                {
                    @AimPointer.started -= m_Wrapper.m_FlyingActionsCallbackInterface.OnAimPointer;
                    @AimPointer.performed -= m_Wrapper.m_FlyingActionsCallbackInterface.OnAimPointer;
                    @AimPointer.canceled -= m_Wrapper.m_FlyingActionsCallbackInterface.OnAimPointer;
                    @Move.started -= m_Wrapper.m_FlyingActionsCallbackInterface.OnMove;
                    @Move.performed -= m_Wrapper.m_FlyingActionsCallbackInterface.OnMove;
                    @Move.canceled -= m_Wrapper.m_FlyingActionsCallbackInterface.OnMove;
                    @Grab.started -= m_Wrapper.m_FlyingActionsCallbackInterface.OnGrab;
                    @Grab.performed -= m_Wrapper.m_FlyingActionsCallbackInterface.OnGrab;
                    @Grab.canceled -= m_Wrapper.m_FlyingActionsCallbackInterface.OnGrab;
                    @Shoot.started -= m_Wrapper.m_FlyingActionsCallbackInterface.OnShoot;
                    @Shoot.performed -= m_Wrapper.m_FlyingActionsCallbackInterface.OnShoot;
                    @Shoot.canceled -= m_Wrapper.m_FlyingActionsCallbackInterface.OnShoot;
                }
                m_Wrapper.m_FlyingActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @AimPointer.started += instance.OnAimPointer;
                    @AimPointer.performed += instance.OnAimPointer;
                    @AimPointer.canceled += instance.OnAimPointer;
                    @Move.started += instance.OnMove;
                    @Move.performed += instance.OnMove;
                    @Move.canceled += instance.OnMove;
                    @Grab.started += instance.OnGrab;
                    @Grab.performed += instance.OnGrab;
                    @Grab.canceled += instance.OnGrab;
                    @Shoot.started += instance.OnShoot;
                    @Shoot.performed += instance.OnShoot;
                    @Shoot.canceled += instance.OnShoot;
                }
            }
        }
        public FlyingActions @Flying => new FlyingActions(this);
        private int m_KeyboardandMouseSchemeIndex = -1;
        public InputControlScheme KeyboardandMouseScheme
        {
            get
            {
                if (m_KeyboardandMouseSchemeIndex == -1) m_KeyboardandMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard and Mouse");
                return asset.controlSchemes[m_KeyboardandMouseSchemeIndex];
            }
        }
        public interface IFlyingActions
        {
            void OnAimPointer(InputAction.CallbackContext context);
            void OnMove(InputAction.CallbackContext context);
            void OnGrab(InputAction.CallbackContext context);
            void OnShoot(InputAction.CallbackContext context);
        }
    }
}
